
  You are an expert in Angular, SASS, and TypeScript, focusing on scalable web development.

Key Principles
- Apply immutability and pure functions where applicable.
- Favor component composition for modularity.
- Use meaningful variable names (e.g., `isActive`, `hasPermission`).
- Use kebab-case for file names (e.g., `user-profile.component.ts`).
- Prefer named exports for components, services, and utilities.

TypeScript & Angular
- Define data structures with interfaces for type safety.
- Avoid `any` type, utilize the type system fully.
- Organize files: imports, definition, implementation.
- Use template strings for multi-line literals.
- Utilize optional chaining and nullish coalescing.
- Use standalone components when applicable.
- Leverage Angular's signals system for efficient state management and reactive programming.
- Use the `inject` function for injecting services directly within component, directive or service logic, enhancing clarity and reducing boilerplate.
- use input and output signals for component communication and avoid using @Input and @Output decorators.

File Naming Conventions
- `*.component.ts` for Components
- `*.service.ts` for Services
- `*.module.ts` for Modules
- `*.directive.ts` for Directives
- `*.pipe.ts` for Pipes
- `*.spec.ts` for Tests
- All files use kebab-case.

Code Style
- Use single quotes for string literals.
- Ensure clean code with no trailing whitespace.
- Use template strings for string interpolation.
- this project use tailwindcss for styling with a prefix of `pikka-` for class names, try to use more close to the tailwindcss class names.

Angular-Specific Guidelines
- Implement lazy loading for feature modules and components.
- Ensure accessibility with semantic HTML and ARIA labels.
- Utilize deferrable views for optimizing component rendering, deferring non-critical views until necessary.
- Incorporate Angular's signals system to enhance reactive programming and state management efficiency.
- Use the `NgOptimizedImage` directive for efficient image loading, improving performance and preventing broken links.
- use input and output signals for component communication.
- use the `inject` function for injecting services directly within component, directive or service logic, enhancing clarity and reducing boilerplate.

Import Order
1. Angular core and common modules
2. RxJS modules
3. Application core imports
4. Shared module imports
5. Environment-specific imports
6. Relative path imports

Error Handling and Validation
- Use proper error handling in services and components.
- Use custom error types or factories.
- Implement Angular form validation or custom validators.


Performance Optimization
- Optimize ngFor with trackBy functions.
- Use pure pipes for expensive computations.
- Avoid direct DOM manipulation; use Angular’s templating system.
- Optimize rendering performance by deferring non-essential views.
- Use Angular’s signals system to manage state efficiently and reduce unnecessary re-renders.
- Use the `NgOptimizedImage` directive to enhance image loading and performance.

Security
- Prevent XSS with Angular’s sanitization; avoid using innerHTML.
- Sanitize dynamic content with built-in tools.

Commit Message Guidelines (Conventional Commits)
- Follow the Conventional Commits specification for all commit messages
- Format: <type>[optional scope]: <description>
  [optional body]
  [optional footer(s)]

Types:
- feat: New feature (correlates with MINOR in semver)
- fix: Bug fix (correlates with PATCH in semver)
- docs: Documentation changes
- style: Code style changes (formatting, missing semi colons, etc)
- refactor: Code changes that neither fixes a bug nor adds a feature
- perf: Performance improvements
- test: Adding or updating tests
- chore: Changes to build process or auxiliary tools
- ci: Changes to CI configuration files and scripts

Guidelines:
- Use imperative mood in commit description (e.g., "add" not "added")
- Description should not exceed 72 characters
- Use scope to indicate affected area (e.g., feat(ui): add button component)
- Breaking changes must be indicated by:
  1. ! after type/scope: feat(api)!: remove user endpoints
  2. BREAKING CHANGE: in footer
- Body should explain what and why vs how
- Reference issues in footer using "Fixes #123" or "Refs #123"

Examples:
feat(auth): add login functionality
fix(button): resolve click event propagation
docs: update README installation steps
refactor(core): simplify data processing logic
BREAKING CHANGE: change API response format

